// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String?  @map("password_hash")
  googleId     String?  @unique @map("google_id")
  name         String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  role         Role     @default(user)

  // Relations
  refreshTokens RefreshToken[]
  placeReview   PlaceReview[]

  @@map("user")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("refresh_token")
}

model Todo {
  id          String   @id @default(cuid())
  title       String
  description String?
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("todo")
}

model Banner {
  id          Int      @id @default(autoincrement())
  bannerTitle String?  @map("banner_title")
  imageFile   String   @map("image_file")
  imageSize   Int      @map("image_size")
  imagePath   String   @map("image_path")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")

  @@map("banner")
}

model City {
  id        Int    @id @default(autoincrement())
  name      String
  latitude  Float
  longitude Float

  place Place[]

  @@map("city")
}

model Place {
  id             Int           @id @default(autoincrement())
  title          String
  description_id String        @db.LongText
  description_mi String        @db.LongText
  description_en String        @db.LongText
  address        String
  imageFile      String        @map("image_file")
  imageSize      Int           @map("image_size")
  imagePath      String        @map("image_path")
  latitude       Float
  longitude      Float
  cityId         Int
  province       String
  isActive       Boolean       @default(true) @map("is_active")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @default(now()) @map("updated_at")
  placeImage     PlaceImage[]
  placeReview    PlaceReview[]
  city           City          @relation(fields: [cityId], references: [id])

  @@index([title])
  @@index([cityId])
  @@index([province])
  @@index([cityId, province])
  @@index([latitude, longitude], name: "location_idx")
  @@map("place")
}

model PlaceImage {
  id        Int      @id @default(autoincrement())
  placeId   Int      @map("place_id")
  imageFile String   @map("image_file")
  imageSize Int      @map("image_size")
  imagePath String   @map("image_path")
  createdAt DateTime @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt DateTime @default(now()) @map("updated_at") @db.DateTime(0)
  place     Place    @relation(fields: [placeId], references: [id])

  @@index([placeId])
  @@map("place_image")
}

model PlaceReview {
  id                    Int                     @id @default(autoincrement())
  placeId               Int                     @map("place_id")
  userId                String                  @map("user_id") @db.Char(36)
  rating                Int                     @default(0)
  comment               String?                 @db.LongText
  isActive              Boolean                 @default(true) @map("is_active")
  createdAt             DateTime                @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt             DateTime                @default(now()) @map("updated_at") @db.DateTime(0)
  place                 Place                   @relation(fields: [placeId], references: [id], onDelete: Cascade)
  user                  User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  placeReviewAttachment PlaceReviewAttachment[]

  @@index([placeId])
  @@index([userId])
  @@index([rating])
  @@index([placeId, rating])
  @@index([createdAt])
  @@map("place_reviews")
}

model PlaceReviewAttachment {
  id             Int         @id @default(autoincrement())
  placeReviewId  Int         @map("place_review_id")
  attachmentFile String      @map("attachment_file")
  attachmentSize Int         @map("attachment_size")
  attachmentPath String      @map("attachment_path")
  createdAt      DateTime    @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt      DateTime    @default(now()) @map("updated_at") @db.DateTime(0)
  placeReview    PlaceReview @relation(fields: [placeReviewId], references: [id])

  @@index([placeReviewId])
  @@map("place_review_attachment")
}
